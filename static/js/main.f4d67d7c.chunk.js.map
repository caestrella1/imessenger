{"version":3,"sources":["components/Navbar.js","components/Message.js","components/TypingIndicator.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/RoomInfo.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Navbar","className","id","icon","faComments","onClick","this","props","toggleDarkMode","isDark","faSun","faMoon","React","Component","isEmoji","str","EmojiAware","withoutEmoji","length","Message","text","buffer","chars","split","c","push","splitEmojiFromText","alignment","user","name","username","formatText","sent","TypingIndicator","getTypingList","bind","typingString","usersWhoAreTyping","map","join","replace","MessageList","node","ReactDOM","findDOMNode","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","messages","message","index","key","sender","parts","payload","content","createdAt","SendMessageForm","state","isEmojiPickerVisible","handleChange","handleSubmit","toggleEmojiPicker","addEmojiToMessage","handleMessageFocus","e","setState","target","value","onChange","preventDefault","sendMessage","emoji","newMessage","native","onSelect","title","color","emojiSize","faSmile","onSubmit","onFocus","placeholder","type","RoomList","getRoomsList","getRoomCount","rooms","room","active","isPrivate","showUnread","unreadCount","lastMessage","Date","lastMessageAt","subscribeToRoom","current","previous","resultString","elapsed","isNaN","minute","num","Math","round","hour","day","timeDifference","RoomInfo","users","Object","values","regex","RegExp","getUsers","deleteRoom","NewRoomForm","roomName","handleInput","document","getElementById","disabled","createRoom","onInput","App","getSortedRooms","sendTypingEvent","markMessageAsRead","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","catch","err","console","log","roomId","requestedRoom","subscribeToRoomMultipart","hooks","onMessage","onUserStartedTyping","onUserStoppedTyping","filter","sorted","sort","a","b","isTypingIn","error","setReadCursor","position","currentRoom","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4d67d7c.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faMoon, faComments } from '@fortawesome/free-solid-svg-icons'\n\nclass Navbar extends React.Component {\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <h1 id=\"app-title\">\n                    <FontAwesomeIcon icon={faComments}/>\n                    iMessenger\n                </h1>\n                <button id=\"toggle-theme\" onClick={this.props.toggleDarkMode}>\n                    <FontAwesomeIcon icon={this.props.isDark ? faSun : faMoon}/>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport EmojiAware from 'emoji-aware';\n\nclass Message extends React.Component {\n\n    formatText(text) {\n        if (isOnlyEmoji(text)) {\n            return (\n                <span className=\"message-emoji\">{text}</span>\n            );\n        }\n        else {\n            return (\n                <div className=\"message-bubble\">\n                    {splitEmojiFromText(text)}\n                </div>\n            );\n        }\n    }\n\n    render() {\n        const alignment = this.props.user.name ===\n            this.props.username ? \"sent\" : \"received\";\n\n        return (\n            <div className={\"message \" + alignment}>\n                <div className=\"message-username\">\n                    {this.props.username}\n                </div>\n                {this.formatText(this.props.text)}\n                <div className=\"message-timestamp\">\n                    Sent {this.props.sent}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction splitEmojiFromText(str) {\n    let buffer = [];\n    let chars = EmojiAware.split(str);\n\n    for (let c of chars) {\n        if (isEmoji(c)) buffer.push(<span className=\"inline-emoji\">{c}</span>);\n        else buffer.push(c);\n    }\n    return buffer;\n}\n\nfunction isEmoji(str) {\n    return EmojiAware.withoutEmoji(str).length === 0;\n}\n\nfunction isOnlyEmoji(str) {\n    return EmojiAware.withoutEmoji(str).length === 0;\n}\n\nexport default Message;\n","import React from 'react';\n\nclass TypingIndicator extends React.Component {\n    constructor() {\n        super();\n\n        this.getTypingList = this.getTypingList.bind(this);\n    }\n\n    getTypingList() {\n        let typingString = \"\";\n        if (this.props.usersWhoAreTyping) {\n            typingString = this.props.usersWhoAreTyping.map(user => user).join(', ')\n            .replace(/, ([^,]+)$/, ' and $1');\n            if (this.props.usersWhoAreTyping.length > 1) typingString += \" are typing...\";\n            else typingString += \" is typing...\";\n        }\n        return typingString;\n    }\n\n    render() {\n        if (this.props.usersWhoAreTyping.length > 0) {\n            return (\n                <div id=\"type-bubble\" className=\"message\">\n                    <div className=\"user-typing\">\n                        {this.getTypingList()}\n                    </div>\n                </div>\n            )\n        }\n        else return null;\n    }\n}\n\nexport default TypingIndicator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Message from './Message';\nimport TypingIndicator from './TypingIndicator';\n\nclass MessageList extends React.Component {\n\n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this);\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight >= node.scrollHeight;\n    }\n\n    componentDidUpdate() {\n        if (this.shouldScrollToBottom) {\n            const node = ReactDOM.findDOMNode(this);\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"message-list\">\n                {this.props.messages.map((message, index) => {\n                        return (\n                            <Message\n                                key={index}\n                                user={this.props.user}\n                                username={message.sender.name}\n                                text={message.parts[0].payload.content}\n                                sent={message.createdAt}\n                            />\n                        );\n                    }\n                )}\n                <TypingIndicator\n                    usersWhoAreTyping={this.props.usersWhoAreTyping}/>\n            </div>\n        );\n    }\n}\n\nexport default MessageList;\n","import React from 'react';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSmile } from '@fortawesome/free-solid-svg-icons';\n\nclass SendMessageForm extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            message: \"\",\n            isEmojiPickerVisible: false\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleEmojiPicker = this.toggleEmojiPicker.bind(this);\n        this.addEmojiToMessage = this.addEmojiToMessage.bind(this);\n        this.handleMessageFocus = this.handleMessageFocus.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n        if (this.props.onChange) this.props.onChange();\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.sendMessage(this.state.message);\n        this.setState({\n            message: \"\"\n        });\n    }\n\n    handleMessageFocus() {\n        this.setState({\n            isEmojiPickerVisible: false\n        });\n    }\n\n    toggleEmojiPicker(e) {\n        e.preventDefault();\n        this.setState({\n            isEmojiPickerVisible: !this.state.isEmojiPickerVisible\n        });\n    }\n\n    addEmojiToMessage(emoji) {\n        let newMessage = this.state.message + emoji.native;\n        this.setState({\n            message: newMessage\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"send-message-container\">\n                <div id=\"emoji-picker\"\n                    className={this.state.isEmojiPickerVisible ? \"show\" : \"\"}>\n                    <Picker\n                        native={true}\n                        onSelect={this.addEmojiToMessage}\n                        title=\"Choose an emoji\"\n                        color=\"var(--highlight)\"\n                        emojiSize={32}\n                        emoji=\"smile\"/>\n                </div>\n\n                <button id=\"toggle-emoji\" onClick={this.toggleEmojiPicker}>\n                    <FontAwesomeIcon icon={faSmile}/>\n                </button>\n\n                <form onSubmit={this.handleSubmit} className=\"send-message\">\n                    <input\n                        onChange={this.handleChange}\n                        onFocus={this.handleMessageFocus}\n                        value={this.state.message}\n                        placeholder=\"Send Message\"\n                        type=\"text\"/>\n                </form>\n\n            </div>\n        );\n    }\n}\n\nexport default SendMessageForm;\n","import React from 'react';\n\nclass RoomList extends React.Component {\n\n    constructor() {\n        super();\n\n        this.getRoomsList = this.getRoomsList.bind(this);\n        this.getRoomCount = this.getRoomCount.bind(this);\n    }\n\n    getRoomCount() {\n        if (this.props.rooms) {\n            return this.props.rooms.length +\n                (this.props.rooms.length > 1 || this.props.rooms.length === 0 ?\n                ' Rooms' : ' Room');\n        }\n        return '0 Rooms';\n    }\n\n    getRoomsList() {\n        if (this.props.room && this.props.rooms) {\n            return (\n                this.props.rooms.map(room => {\n                    const active = this.props.room.id === room.id ? \"active\" : \"\";\n                    const isPrivate = room.isPrivate ? \"Private\" : \"Public\";\n                    const showUnread = room.unreadCount > 0 ? \"show\" : \"\";\n                    const lastMessage = new Date(room.lastMessageAt);\n\n                    return (\n                        <li key={room.id} className={\"room \" + active}>\n                            <button onClick={() => this.props.subscribeToRoom(room.id)}>\n                                <div className=\"room-meta\">\n                                    <span className=\"room-is-private\">\n                                        {isPrivate}\n                                    </span>\n                                    <span className=\"room-name\">\n                                        {room.name}\n                                    </span>\n                                    <span className=\"room-last\">\n                                        { timeDifference(new Date(), lastMessage) }\n                                    </span>\n                                </div>\n                                <div className={\"room-unread \" + showUnread}>\n                                    {room.unreadCount}\n                                </div>\n                            </button>\n                        </li>\n                    );\n                })\n            );\n        }\n        else {\n            return null;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"rooms\">\n                <div className=\"room-header\">\n                    <div>\n                        <h1 className=\"room-title\">Room List</h1>\n                        <span className=\"room-count\">{this.getRoomCount()}</span>\n                    </div>\n                </div>\n                <ul className=\"room-list\">\n                    {this.getRoomsList()}\n                </ul>\n            </div>\n        );\n    }\n}\n\nfunction timeDifference(current, previous) {\n    var minute = 60 * 1000;\n    var hour = minute * 60;\n    var day = hour * 24;\n    var month = day * 30;\n    var year = day * 365;\n\n    var elapsed = current - previous;\n    var resultString;\n\n    if (isNaN(previous)) {\n        return 'No messages';\n    }\n    else if (elapsed < minute) {\n        resultString = 'Just now';\n    }\n    else if (elapsed < hour) {\n        let num = Math.round(elapsed/minute);\n        (num > 1) ? resultString = num + ' minutes ago' : resultString = num + ' minute ago';\n    }\n    else if (elapsed < day) {\n        let num = Math.round(elapsed/hour);\n        num > 1 ? resultString = num + ' hours ago' : resultString = num + ' hour ago';\n    }\n    else if (elapsed < month) {\n        let num = Math.round(elapsed/day);\n        num > 1 ? resultString = num + ' days ago' : resultString = num + ' day ago';\n    }\n    else if (elapsed < year) {\n        let num = Math.round(elapsed/month);\n        num > 1 ? resultString = num + ' months ago' : resultString = num + ' month ago';\n    }\n    else {\n        let num = Math.round(elapsed/year);\n        num > 1 ? resultString = num + ' years ago' : resultString = num + ' year ago';\n    }\n\n    return resultString;\n}\n\nexport default RoomList;\n","import React from 'react';\n\nclass RoomInfo extends React.Component {\n\n    getUsers() {\n        let users = Object.values(this.props.room.users);\n        let replace = this.props.user.name;\n        let regex = new RegExp(replace, 'g');\n\n        return users.map((user) => {\n            return user.name;\n        }).join(', ').replace(regex, 'You').replace(/, ([^,]+)$/, ' and $1');\n    }\n\n    render() {\n        if (this.props.room) {\n            return (\n                <div className=\"room-info\">\n                    <div className=\"room-name-users\">\n                        <h1 className=\"room-title\">{this.props.room.name}</h1>\n                        <span className=\"user-list\">{ this.getUsers() }</span>\n                    </div>\n                    <div className=\"room-actions\">\n                        <button\n                            className=\"room-delete\"\n                            type=\"submit\"\n                            onClick={() => this.props.deleteRoom(this.props.room.id)}>\n                            Delete Room\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"room-info\">\n                    <div className=\"room-name-users\">\n                        <h1 className=\"room-title\">No Room Selected</h1>\n                        <span className=\"user-list\">Please select a room to get started</span>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default RoomInfo;\n","import React from 'react';\n\nclass NewRoomForm extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            roomName: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            roomName: e.target.value\n        });\n    }\n\n    handleInput() {\n        if (document.getElementById('room-input').value.length === 0)\n            document.getElementById('add-room').disabled = true;\n        else document.getElementById('add-room').disabled = false;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.createRoom(this.state.roomName);\n        this.setState({roomName: \"\"});\n        document.getElementById('add-room').disabled = true;\n    }\n\n    render() {\n        return (\n\n                <form className=\"new-room\" onSubmit={this.handleSubmit}>\n                    <input\n                        id=\"room-input\"\n                        type=\"text\"\n                        value={this.state.roomName}\n                        placeholder=\"New Room\"\n                        onInput={this.handleInput}\n                        onChange={this.handleChange}/>\n                    <button id=\"add-room\" type=\"submit\" disabled>\n                        <span className=\"plus\">+</span>\n                    </button>\n                </form>\n\n        );\n    }\n}\n\nexport default NewRoomForm;\n","import React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport Navbar from './components/Navbar';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport RoomInfo from './components/RoomInfo';\nimport NewRoomForm from './components/NewRoomForm';\nimport './css/styles.css';\n\nimport { tokenURL, instanceLocator } from './config';\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            room: null,\n            rooms: null,\n            messages: [],\n            usersWhoAreTyping: [],\n            isDark: false\n        };\n\n        /* Room methods */\n        this.createRoom = this.createRoom.bind(this);\n        this.subscribeToRoom = this.subscribeToRoom.bind(this);\n        this.getSortedRooms = this.getSortedRooms.bind(this);\n        this.deleteRoom = this.deleteRoom.bind(this);\n        this.sendTypingEvent = this.sendTypingEvent.bind(this);\n\n        /* Message methods */\n        this.markMessageAsRead = this.markMessageAsRead.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n\n        /* Option methods */\n        this.toggleDarkMode = this.toggleDarkMode.bind(this);\n    }\n\n    componentDidMount() {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator,\n            userId: \"carlos\",\n            tokenProvider: new Chatkit.TokenProvider({\n                url: tokenURL\n            })\n        });\n\n        chatManager.connect()\n        .then(user => {\n            this.setState({ user });\n            if (this.state.user) {\n                this.getSortedRooms();\n                this.subscribeToRoom(this.state.rooms[0].id);\n            }\n        })\n        .catch(err => console.log(\"error connecting to current user\", err));\n    }\n\n    /* Room methods */\n\n    createRoom(roomName) {\n        this.state.user.createRoom({\n            name: roomName\n        })\n        .then(room => this.subscribeToRoom(room.id))\n        .catch(err => console.log(\"error creating room\", err));\n    }\n\n    subscribeToRoom(roomId) {\n        if (this.state.room && this.state.room.id === roomId) {return;}\n\n        this.setState({ messages: [] });\n        let requestedRoom = true;\n\n        this.state.user.subscribeToRoomMultipart({\n            roomId,\n            hooks: {\n                onMessage: message => {\n                    if ((requestedRoom && roomId === message.room.id) ||\n                        (!requestedRoom && this.state.room.id === message.room.id)) {\n                            this.setState({\n                                messages: [...this.state.messages, message]\n                            })\n                            this.markMessageAsRead(requestedRoom ?\n                                roomId : this.state.room.id, message);\n                    }\n                    this.getSortedRooms();\n                },\n                onUserStartedTyping: user => {\n                    this.setState({\n                        usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name],\n                    })\n                },\n                onUserStoppedTyping: user => {\n                    this.setState({\n                        usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\n                            username => username !== user.name\n                        ),\n                    })\n                }\n            }\n        })\n        .then(room => {\n            this.setState({room});\n            requestedRoom = false;\n        })\n        .catch(err => console.log(\"Error subscribing to room\", err));\n    }\n\n    getSortedRooms() {\n        let sorted = this.state.user.rooms.sort((a, b) =>\n            new Date(b.lastMessageAt) - new Date(a.lastMessageAt)\n        );\n        this.setState({\n            rooms: sorted\n        });\n    }\n\n    deleteRoom(roomId) {\n        this.state.user.deleteRoom({ roomId })\n          .then(() => {\n              this.subscribeToRoom(this.state.user.rooms[0].id);\n              console.log(`Deleted room with ID: ${roomId}`)\n          })\n          .catch(err => {\n            console.log(`Error deleted room ${roomId}: ${err}`)\n          })\n    }\n\n    sendTypingEvent() {\n        this.state.user\n            .isTypingIn({ roomId: this.state.room.id })\n            .catch(error => console.error('error', error))\n    }\n\n    /* Message methods */\n\n    markMessageAsRead(roomId, message) {\n        if (roomId === message.room.id) {\n            this.state.user.setReadCursor({\n                roomId,\n                position: message.id\n            });\n        }\n    }\n\n    sendMessage(text) {\n        this.state.user.sendMessage({\n            text, roomId: this.state.room.id\n        });\n    }\n\n    /* Option methods */\n\n    toggleDarkMode() {\n        this.setState({\n            isDark: !this.state.isDark\n        });\n    }\n\n    render() {\n        if (!this.state.user) return null;\n        else {\n            return (\n                <div id=\"app\" className={\"app \" + (this.state.isDark ? \"dark\" : \"light\")}>\n                    <Navbar\n                        toggleDarkMode={this.toggleDarkMode}/>\n                    <RoomList\n                        room={this.state.room}\n                        rooms={this.state.rooms}\n                        subscribeToRoom={this.subscribeToRoom}/>\n                    <RoomInfo\n                        user={this.state.user}\n                        room={this.state.room}\n                        deleteRoom={this.deleteRoom}/>\n                    <MessageList\n                        user={this.state.user}\n                        room={this.state.room}\n                        messages={this.state.messages}\n                        usersWhoAreTyping={this.state.usersWhoAreTyping}/>\n                    <SendMessageForm\n                        currentRoom={this.state.room}\n                        sendMessage={this.sendMessage}\n                        onChange={this.sendTypingEvent}/>\n                    <NewRoomForm createRoom={this.createRoom}/>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","const tokenURL = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/07629a7c-aaa7-485f-9de5-e10358252138/token\";\nconst instanceLocator = \"v1:us1:07629a7c-aaa7-485f-9de5-e10358252138\";\n\nexport {tokenURL, instanceLocator};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}